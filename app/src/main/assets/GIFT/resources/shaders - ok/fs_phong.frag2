#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

uniform vec4 diffuse;
uniform vec4 ambient;
uniform vec4 specular;
uniform vec4 emissive;
uniform float shininess;
uniform float opacity;
uniform float globalOpacity;

//uniform samplerCube Sampler;

varying vec3 Normal;
varying vec3 LightDir;
varying vec3 EyeDir;
//varying mediump vec3 ReflectDir;

void main()
{
	vec4 color;
	vec4 amb;
	vec4 spec = vec4(0.0);

	vec3 N = normalize(Normal);
	vec3 L = LightDir;
	vec3 E = EyeDir;
	vec3 R = reflect(-L,N);
//	vec4 ambLight = vec4(0.2,0.2,0.2,1.0);

	float NdotL = max(dot (N,L),0.3); 

	vec3 H = normalize(L+E);
	float NdotH = max(0.0,dot(N,H));
	if ( NdotL > 0.0 )
		spec = specular * pow(NdotH,shininess);
	
	color = diffuse * NdotL; 
	
//	amb = ambient * ambLight;

//	vec4 env = textureCube(Sampler, ReflectDir);

//gl_FragColor = (color * intensity) + spec + amb + env; 
//	vec4 fragColor = (color * intensity) + env*spec;

	vec4 fragColor = color + spec;
	
//	fragColor = vec4(clamp((color * intensity + specular) , 0.0 , 1.0) , 1.0);

	fragColor.a = opacity * globalOpacity;
	gl_FragColor = fragColor;
}
