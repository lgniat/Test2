#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

uniform vec4 diffuse;
uniform vec4 ambient;
uniform vec4 specular;
uniform vec4 emissive;
uniform float shininess;
uniform float opacity;
uniform float globalOpacity;

//uniform samplerCube Sampler;

varying vec3 Normal;
varying vec3 LightDir;
varying vec3 EyeDir;
//varying mediump vec3 ReflectDir;

void main()
{
	vec3 lightDir = LightDir;
	vec3 v_eye = vec3(0,10,0);

	//光的属性
	vec4 light_Ambient = vec4(0.2f,0.2f,0.2f,1);
	vec4 light_Diffuse = vec4(1,1,1,1);
	vec4 light_Specular = vec4(1,1,1,1);

//对象的属性
	vec4 obj_Ambient = diffuse;
	vec4 obj_Diffuse = diffuse;
	vec4 obj_Specular = vec4(1,1,1,1);
	float obj_SpecularExp = 20;

// 环境光影响
	vec4 color = light_Ambient * obj_Ambient;

	vec3 normal = normalize(Normal);
	float nDotL = max(dot(lightDir, normal), 0.0);

	if (nDotL > 0.0)
	{
		vec3 eye = normalize(v_eye);

		//计算光到点后反射矢量
		vec3 reflection = reflect(-lightDir, normal);

		//计算点乘
		float eDotR = max(dot(eye, reflection), 0.0);

		//加漫反射
		color += light_Diffuse * obj_Diffuse * nDotL;

		float specularIntensity = 0.0;

		if (eDotR > 0.0)
		{
			specularIntensity = pow(eDotR, obj_SpecularExp);
		}
		//加高光
		color += light_Specular * obj_Specular * specularIntensity;
	}
	
	fragColor.a = opacity * globalOpacity;
	gl_FragColor = color;
}
